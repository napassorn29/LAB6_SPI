
LAB6_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c04  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db4  08002db4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002db4  08002db4  00012db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dbc  08002dbc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08002dd0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002dd0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a590  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188b  00000000  00000000  0002a5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014e23  00000000  00000000  0002cf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a307  00000000  00000000  00041d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008371f  00000000  00000000  0004c05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf779  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000232c  00000000  00000000  000cf7cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002d84 	.word	0x08002d84

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002d84 	.word	0x08002d84

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fd04 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f838 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f900 	bl	80006ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8d4 	bl	8000698 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80004f0:	f000 f89c 	bl	800062c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  SPITxRx_Setup();
 80004f4:	f000 f98c 	bl	8000810 <SPITxRx_Setup>
  setOutputGPIOB();
 80004f8:	f000 f9d0 	bl	800089c <setOutputGPIOB>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  static uint32_t timestamp = 0;
	  if(HAL_GetTick() > timestamp)
 80004fc:	f000 fd5c 	bl	8000fb8 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <main+0x74>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	d91f      	bls.n	800054a <main+0x6e>
	  {
		  timestamp = HAL_GetTick() + 10;
 800050a:	f000 fd55 	bl	8000fb8 <HAL_GetTick>
 800050e:	4603      	mov	r3, r0
 8000510:	330a      	adds	r3, #10
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <main+0x74>)
 8000514:	6013      	str	r3, [r2, #0]
		  cmd++;
 8000516:	4b0f      	ldr	r3, [pc, #60]	; (8000554 <main+0x78>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	3301      	adds	r3, #1
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <main+0x78>)
 8000520:	701a      	strb	r2, [r3, #0]
		  cmd = cmd % 2;
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <main+0x78>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <main+0x78>)
 800052e:	701a      	strb	r2, [r3, #0]
		  switch (cmd)
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <main+0x78>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <main+0x62>
 8000538:	2b01      	cmp	r3, #1
 800053a:	d003      	beq.n	8000544 <main+0x68>
 800053c:	e006      	b.n	800054c <main+0x70>
		  {
		  case 0:
			  SPITxRx_readIO();
 800053e:	f000 f97d 	bl	800083c <SPITxRx_readIO>
			  break;
 8000542:	e003      	b.n	800054c <main+0x70>
		  case 1:
			  SPITxRx_writeIO();
 8000544:	f000 f9d2 	bl	80008ec <SPITxRx_writeIO>
			  break;
 8000548:	e000      	b.n	800054c <main+0x70>
//		  case 2:
//			  setOutputGPIOB();
//			  break;
		  }
	  }
 800054a:	bf00      	nop
  {
 800054c:	e7d6      	b.n	80004fc <main+0x20>
 800054e:	bf00      	nop
 8000550:	200000dc 	.word	0x200000dc
 8000554:	200000db 	.word	0x200000db

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f002 fc04 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c4:	2300      	movs	r3, #0
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005c8:	2310      	movs	r3, #16
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005d2:	2304      	movs	r3, #4
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d6:	2304      	movs	r3, #4
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 f804 	bl	80015ec <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ea:	f000 fb49 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fa66 	bl	8001adc <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000616:	f000 fb33 	bl	8000c80 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_SPI3_Init+0x64>)
 8000632:	4a18      	ldr	r2, [pc, #96]	; (8000694 <MX_SPI3_Init+0x68>)
 8000634:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_SPI3_Init+0x64>)
 8000638:	f44f 7282 	mov.w	r2, #260	; 0x104
 800063c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_SPI3_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_SPI3_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_SPI3_Init+0x64>)
 800064c:	2202      	movs	r2, #2
 800064e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_SPI3_Init+0x64>)
 8000652:	2201      	movs	r2, #1
 8000654:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_SPI3_Init+0x64>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_SPI3_Init+0x64>)
 8000660:	2228      	movs	r2, #40	; 0x28
 8000662:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_SPI3_Init+0x64>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_SPI3_Init+0x64>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_SPI3_Init+0x64>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_SPI3_Init+0x64>)
 8000678:	220a      	movs	r2, #10
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_SPI3_Init+0x64>)
 800067e:	f001 fc4d 	bl	8001f1c <HAL_SPI_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000688:	f000 fafa 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028
 8000694:	40003c00 	.word	0x40003c00

08000698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <MX_USART2_UART_Init+0x50>)
 80006a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006be:	220c      	movs	r2, #12
 80006c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f002 f86a 	bl	80027a8 <HAL_UART_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006da:	f000 fad1 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000080 	.word	0x20000080
 80006e8:	40004400 	.word	0x40004400

080006ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <MX_GPIO_Init+0x114>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a3d      	ldr	r2, [pc, #244]	; (8000800 <MX_GPIO_Init+0x114>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b3b      	ldr	r3, [pc, #236]	; (8000800 <MX_GPIO_Init+0x114>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b37      	ldr	r3, [pc, #220]	; (8000800 <MX_GPIO_Init+0x114>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a36      	ldr	r2, [pc, #216]	; (8000800 <MX_GPIO_Init+0x114>)
 8000728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b34      	ldr	r3, [pc, #208]	; (8000800 <MX_GPIO_Init+0x114>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	4b30      	ldr	r3, [pc, #192]	; (8000800 <MX_GPIO_Init+0x114>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a2f      	ldr	r2, [pc, #188]	; (8000800 <MX_GPIO_Init+0x114>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_GPIO_Init+0x114>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b29      	ldr	r3, [pc, #164]	; (8000800 <MX_GPIO_Init+0x114>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a28      	ldr	r2, [pc, #160]	; (8000800 <MX_GPIO_Init+0x114>)
 8000760:	f043 0308 	orr.w	r3, r3, #8
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_GPIO_Init+0x114>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0308 	and.w	r3, r3, #8
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_GPIO_Init+0x114>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a21      	ldr	r2, [pc, #132]	; (8000800 <MX_GPIO_Init+0x114>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0x114>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_GPIO_Init+0x118>)
 8000794:	f000 ff10 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2104      	movs	r1, #4
 800079c:	481a      	ldr	r0, [pc, #104]	; (8000808 <MX_GPIO_Init+0x11c>)
 800079e:	f000 ff0b 	bl	80015b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <MX_GPIO_Init+0x120>)
 80007ba:	f000 fd61 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007be:	2320      	movs	r3, #32
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0x118>)
 80007d6:	f000 fd53 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007da:	2304      	movs	r3, #4
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_GPIO_Init+0x11c>)
 80007f2:	f000 fd45 	bl	8001280 <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020000 	.word	0x40020000
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40020800 	.word	0x40020800

08000810 <SPITxRx_Setup>:

/* USER CODE BEGIN 4 */

void SPITxRx_Setup()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	//CS pulse
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); // CS Select
 8000814:	2200      	movs	r2, #0
 8000816:	2104      	movs	r1, #4
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <SPITxRx_Setup+0x28>)
 800081a:	f000 fecd 	bl	80015b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800081e:	2001      	movs	r0, #1
 8000820:	f000 fbd6 	bl	8000fd0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); // CS deSelect
 8000824:	2201      	movs	r2, #1
 8000826:	2104      	movs	r1, #4
 8000828:	4803      	ldr	r0, [pc, #12]	; (8000838 <SPITxRx_Setup+0x28>)
 800082a:	f000 fec5 	bl	80015b8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f000 fbce 	bl	8000fd0 <HAL_Delay>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40020c00 	.word	0x40020c00

0800083c <SPITxRx_readIO>:

void SPITxRx_readIO()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 8000840:	2104      	movs	r1, #4
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <SPITxRx_readIO+0x4c>)
 8000844:	f000 fea0 	bl	8001588 <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d01a      	beq.n	8000884 <SPITxRx_readIO+0x48>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2104      	movs	r1, #4
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <SPITxRx_readIO+0x4c>)
 8000854:	f000 feb0 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000001;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <SPITxRx_readIO+0x50>)
 800085a:	2241      	movs	r2, #65	; 0x41
 800085c:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x12;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <SPITxRx_readIO+0x50>)
 8000860:	2212      	movs	r2, #18
 8000862:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <SPITxRx_readIO+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	709a      	strb	r2, [r3, #2]
		SPITx[3] = 0;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <SPITxRx_readIO+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	70da      	strb	r2, [r3, #3]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 4);
 8000870:	2304      	movs	r3, #4
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <SPITxRx_readIO+0x54>)
 8000874:	4905      	ldr	r1, [pc, #20]	; (800088c <SPITxRx_readIO+0x50>)
 8000876:	4807      	ldr	r0, [pc, #28]	; (8000894 <SPITxRx_readIO+0x58>)
 8000878:	f001 fbda 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		switch_read = SPIRx[2];
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <SPITxRx_readIO+0x54>)
 800087e:	789a      	ldrb	r2, [r3, #2]
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SPITxRx_readIO+0x5c>)
 8000882:	701a      	strb	r2, [r3, #0]
	}
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40020c00 	.word	0x40020c00
 800088c:	200000d0 	.word	0x200000d0
 8000890:	200000c4 	.word	0x200000c4
 8000894:	20000028 	.word	0x20000028
 8000898:	200000da 	.word	0x200000da

0800089c <setOutputGPIOB>:


void setOutputGPIOB()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 80008a0:	2104      	movs	r1, #4
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <setOutputGPIOB+0x40>)
 80008a4:	f000 fe70 	bl	8001588 <HAL_GPIO_ReadPin>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d013      	beq.n	80008d6 <setOutputGPIOB+0x3a>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2104      	movs	r1, #4
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <setOutputGPIOB+0x40>)
 80008b4:	f000 fe80 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <setOutputGPIOB+0x44>)
 80008ba:	2240      	movs	r2, #64	; 0x40
 80008bc:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x01;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <setOutputGPIOB+0x44>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00000000;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <setOutputGPIOB+0x44>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80008ca:	2303      	movs	r3, #3
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <setOutputGPIOB+0x48>)
 80008ce:	4904      	ldr	r1, [pc, #16]	; (80008e0 <setOutputGPIOB+0x44>)
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <setOutputGPIOB+0x4c>)
 80008d2:	f001 fbad 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
	}
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	200000d0 	.word	0x200000d0
 80008e4:	200000c4 	.word	0x200000c4
 80008e8:	20000028 	.word	0x20000028

080008ec <SPITxRx_writeIO>:

void SPITxRx_writeIO()
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2))
 80008f0:	2104      	movs	r1, #4
 80008f2:	48b9      	ldr	r0, [pc, #740]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 80008f4:	f000 fe48 	bl	8001588 <HAL_GPIO_ReadPin>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f000 81a6 	beq.w	8000c4c <SPITxRx_writeIO+0x360>
	{
		if(SPIRx[2] == 0b00001110)
 8000900:	4bb6      	ldr	r3, [pc, #728]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000902:	789b      	ldrb	r3, [r3, #2]
 8000904:	2b0e      	cmp	r3, #14
 8000906:	d12e      	bne.n	8000966 <SPITxRx_writeIO+0x7a>
		{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000908:	2200      	movs	r2, #0
 800090a:	2104      	movs	r1, #4
 800090c:	48b2      	ldr	r0, [pc, #712]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 800090e:	f000 fe53 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000912:	4bb3      	ldr	r3, [pc, #716]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000914:	2240      	movs	r2, #64	; 0x40
 8000916:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000918:	4bb1      	ldr	r3, [pc, #708]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 800091a:	2213      	movs	r2, #19
 800091c:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b10101010;
 800091e:	4bb0      	ldr	r3, [pc, #704]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000920:	22aa      	movs	r2, #170	; 0xaa
 8000922:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000924:	2303      	movs	r3, #3
 8000926:	4aad      	ldr	r2, [pc, #692]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000928:	49ad      	ldr	r1, [pc, #692]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 800092a:	48ae      	ldr	r0, [pc, #696]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 800092c:	f001 fb80 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000930:	2064      	movs	r0, #100	; 0x64
 8000932:	f000 fb4d 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2104      	movs	r1, #4
 800093a:	48a7      	ldr	r0, [pc, #668]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 800093c:	f000 fe3c 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000940:	4ba7      	ldr	r3, [pc, #668]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000942:	2240      	movs	r2, #64	; 0x40
 8000944:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000946:	4ba6      	ldr	r3, [pc, #664]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000948:	2213      	movs	r2, #19
 800094a:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b01010101;
 800094c:	4ba4      	ldr	r3, [pc, #656]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 800094e:	2255      	movs	r2, #85	; 0x55
 8000950:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000952:	2303      	movs	r3, #3
 8000954:	4aa1      	ldr	r2, [pc, #644]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000956:	49a2      	ldr	r1, [pc, #648]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000958:	48a2      	ldr	r0, [pc, #648]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 800095a:	f001 fb69 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 800095e:	2064      	movs	r0, #100	; 0x64
 8000960:	f000 fb36 	bl	8000fd0 <HAL_Delay>
		SPITx[2] = 0b11110000;
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
		HAL_Delay(100);
		}
	}
}
 8000964:	e172      	b.n	8000c4c <SPITxRx_writeIO+0x360>
		else if(SPIRx[2] == 0b00001111)
 8000966:	4b9d      	ldr	r3, [pc, #628]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000968:	789b      	ldrb	r3, [r3, #2]
 800096a:	2b0f      	cmp	r3, #15
 800096c:	d114      	bne.n	8000998 <SPITxRx_writeIO+0xac>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	4899      	ldr	r0, [pc, #612]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000974:	f000 fe20 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000978:	4b99      	ldr	r3, [pc, #612]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 800097a:	2240      	movs	r2, #64	; 0x40
 800097c:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 800097e:	4b98      	ldr	r3, [pc, #608]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000980:	2213      	movs	r2, #19
 8000982:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111111;
 8000984:	4b96      	ldr	r3, [pc, #600]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 800098a:	2303      	movs	r3, #3
 800098c:	4a93      	ldr	r2, [pc, #588]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 800098e:	4994      	ldr	r1, [pc, #592]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000990:	4894      	ldr	r0, [pc, #592]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000992:	f001 fb4d 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
}
 8000996:	e159      	b.n	8000c4c <SPITxRx_writeIO+0x360>
		else if(SPIRx[2] == 0b00001101)
 8000998:	4b90      	ldr	r3, [pc, #576]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 800099a:	789b      	ldrb	r3, [r3, #2]
 800099c:	2b0d      	cmp	r3, #13
 800099e:	d15c      	bne.n	8000a5a <SPITxRx_writeIO+0x16e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2104      	movs	r1, #4
 80009a4:	488c      	ldr	r0, [pc, #560]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 80009a6:	f000 fe07 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 80009aa:	4b8d      	ldr	r3, [pc, #564]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 80009b0:	4b8b      	ldr	r3, [pc, #556]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009b2:	2213      	movs	r2, #19
 80009b4:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00111111;
 80009b6:	4b8a      	ldr	r3, [pc, #552]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009b8:	223f      	movs	r2, #63	; 0x3f
 80009ba:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80009bc:	2303      	movs	r3, #3
 80009be:	4a87      	ldr	r2, [pc, #540]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 80009c0:	4987      	ldr	r1, [pc, #540]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009c2:	4888      	ldr	r0, [pc, #544]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 80009c4:	f001 fb34 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 80009c8:	2064      	movs	r0, #100	; 0x64
 80009ca:	f000 fb01 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2104      	movs	r1, #4
 80009d2:	4881      	ldr	r0, [pc, #516]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 80009d4:	f000 fdf0 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 80009d8:	4b81      	ldr	r3, [pc, #516]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009da:	2240      	movs	r2, #64	; 0x40
 80009dc:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 80009de:	4b80      	ldr	r3, [pc, #512]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009e0:	2213      	movs	r2, #19
 80009e2:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11001111;
 80009e4:	4b7e      	ldr	r3, [pc, #504]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009e6:	22cf      	movs	r2, #207	; 0xcf
 80009e8:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 80009ea:	2303      	movs	r3, #3
 80009ec:	4a7b      	ldr	r2, [pc, #492]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 80009ee:	497c      	ldr	r1, [pc, #496]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 80009f0:	487c      	ldr	r0, [pc, #496]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 80009f2:	f001 fb1d 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f000 faea 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2104      	movs	r1, #4
 8000a00:	4875      	ldr	r0, [pc, #468]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000a02:	f000 fdd9 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000a06:	4b76      	ldr	r3, [pc, #472]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a08:	2240      	movs	r2, #64	; 0x40
 8000a0a:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000a0c:	4b74      	ldr	r3, [pc, #464]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a0e:	2213      	movs	r2, #19
 8000a10:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11110011;
 8000a12:	4b73      	ldr	r3, [pc, #460]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a14:	22f3      	movs	r2, #243	; 0xf3
 8000a16:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a18:	2303      	movs	r3, #3
 8000a1a:	4a70      	ldr	r2, [pc, #448]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000a1c:	4970      	ldr	r1, [pc, #448]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a1e:	4871      	ldr	r0, [pc, #452]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000a20:	f001 fb06 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000a24:	2064      	movs	r0, #100	; 0x64
 8000a26:	f000 fad3 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	486a      	ldr	r0, [pc, #424]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000a30:	f000 fdc2 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000a34:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a36:	2240      	movs	r2, #64	; 0x40
 8000a38:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000a3a:	4b69      	ldr	r3, [pc, #420]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a3c:	2213      	movs	r2, #19
 8000a3e:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111100;
 8000a40:	4b67      	ldr	r3, [pc, #412]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a42:	22fc      	movs	r2, #252	; 0xfc
 8000a44:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a46:	2303      	movs	r3, #3
 8000a48:	4a64      	ldr	r2, [pc, #400]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000a4a:	4965      	ldr	r1, [pc, #404]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a4c:	4865      	ldr	r0, [pc, #404]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000a4e:	f001 faef 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000a52:	2064      	movs	r0, #100	; 0x64
 8000a54:	f000 fabc 	bl	8000fd0 <HAL_Delay>
}
 8000a58:	e0f8      	b.n	8000c4c <SPITxRx_writeIO+0x360>
		else if(SPIRx[2] == 0b00001011)
 8000a5a:	4b60      	ldr	r3, [pc, #384]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000a5c:	789b      	ldrb	r3, [r3, #2]
 8000a5e:	2b0b      	cmp	r3, #11
 8000a60:	f040 80c2 	bne.w	8000be8 <SPITxRx_writeIO+0x2fc>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2104      	movs	r1, #4
 8000a68:	485b      	ldr	r0, [pc, #364]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000a6a:	f000 fda5 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000a6e:	4b5c      	ldr	r3, [pc, #368]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a70:	2240      	movs	r2, #64	; 0x40
 8000a72:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000a74:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a76:	2213      	movs	r2, #19
 8000a78:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111110;
 8000a7a:	4b59      	ldr	r3, [pc, #356]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a7c:	22fe      	movs	r2, #254	; 0xfe
 8000a7e:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000a80:	2303      	movs	r3, #3
 8000a82:	4a56      	ldr	r2, [pc, #344]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000a84:	4956      	ldr	r1, [pc, #344]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a86:	4857      	ldr	r0, [pc, #348]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000a88:	f001 fad2 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f000 fa9f 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2104      	movs	r1, #4
 8000a96:	4850      	ldr	r0, [pc, #320]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000a98:	f000 fd8e 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000a9c:	4b50      	ldr	r3, [pc, #320]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000aa2:	4b4f      	ldr	r3, [pc, #316]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000aa4:	2213      	movs	r2, #19
 8000aa6:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b01111111;
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000aaa:	227f      	movs	r2, #127	; 0x7f
 8000aac:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000aae:	2303      	movs	r3, #3
 8000ab0:	4a4a      	ldr	r2, [pc, #296]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000ab2:	494b      	ldr	r1, [pc, #300]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000ab4:	484b      	ldr	r0, [pc, #300]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000ab6:	f001 fabb 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000aba:	2064      	movs	r0, #100	; 0x64
 8000abc:	f000 fa88 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4844      	ldr	r0, [pc, #272]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000ac6:	f000 fd77 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000acc:	2240      	movs	r2, #64	; 0x40
 8000ace:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000ad0:	4b43      	ldr	r3, [pc, #268]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000ad2:	2213      	movs	r2, #19
 8000ad4:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111101;
 8000ad6:	4b42      	ldr	r3, [pc, #264]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000ad8:	22fd      	movs	r2, #253	; 0xfd
 8000ada:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000adc:	2303      	movs	r3, #3
 8000ade:	4a3f      	ldr	r2, [pc, #252]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000ae0:	493f      	ldr	r1, [pc, #252]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000ae2:	4840      	ldr	r0, [pc, #256]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000ae4:	f001 faa4 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000ae8:	2064      	movs	r0, #100	; 0x64
 8000aea:	f000 fa71 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2104      	movs	r1, #4
 8000af2:	4839      	ldr	r0, [pc, #228]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000af4:	f000 fd60 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000afa:	2240      	movs	r2, #64	; 0x40
 8000afc:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000afe:	4b38      	ldr	r3, [pc, #224]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b00:	2213      	movs	r2, #19
 8000b02:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b10111111;
 8000b04:	4b36      	ldr	r3, [pc, #216]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b06:	22bf      	movs	r2, #191	; 0xbf
 8000b08:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	4a33      	ldr	r2, [pc, #204]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000b0e:	4934      	ldr	r1, [pc, #208]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b10:	4834      	ldr	r0, [pc, #208]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000b12:	f001 fa8d 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f000 fa5a 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2104      	movs	r1, #4
 8000b20:	482d      	ldr	r0, [pc, #180]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000b22:	f000 fd49 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b28:	2240      	movs	r2, #64	; 0x40
 8000b2a:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000b2c:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b2e:	2213      	movs	r2, #19
 8000b30:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11111011;
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b34:	22fb      	movs	r2, #251	; 0xfb
 8000b36:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b38:	2303      	movs	r3, #3
 8000b3a:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000b3c:	4928      	ldr	r1, [pc, #160]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b3e:	4829      	ldr	r0, [pc, #164]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000b40:	f001 fa76 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000b44:	2064      	movs	r0, #100	; 0x64
 8000b46:	f000 fa43 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000b50:	f000 fd32 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b56:	2240      	movs	r2, #64	; 0x40
 8000b58:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b5c:	2213      	movs	r2, #19
 8000b5e:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11011111;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b62:	22df      	movs	r2, #223	; 0xdf
 8000b64:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b66:	2303      	movs	r3, #3
 8000b68:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000b6a:	491d      	ldr	r1, [pc, #116]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b6c:	481d      	ldr	r0, [pc, #116]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000b6e:	f001 fa5f 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000b72:	2064      	movs	r0, #100	; 0x64
 8000b74:	f000 fa2c 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000b7e:	f000 fd1b 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b84:	2240      	movs	r2, #64	; 0x40
 8000b86:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000b88:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b8a:	2213      	movs	r2, #19
 8000b8c:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11110111;
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b90:	22f7      	movs	r2, #247	; 0xf7
 8000b92:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000b94:	2303      	movs	r3, #3
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000b98:	4911      	ldr	r1, [pc, #68]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000b9a:	4812      	ldr	r0, [pc, #72]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000b9c:	f001 fa48 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000ba0:	2064      	movs	r0, #100	; 0x64
 8000ba2:	f000 fa15 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2104      	movs	r1, #4
 8000baa:	480b      	ldr	r0, [pc, #44]	; (8000bd8 <SPITxRx_writeIO+0x2ec>)
 8000bac:	f000 fd04 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000bb8:	2213      	movs	r2, #19
 8000bba:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11101111;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000bbe:	22ef      	movs	r2, #239	; 0xef
 8000bc0:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <SPITxRx_writeIO+0x2f0>)
 8000bc6:	4906      	ldr	r1, [pc, #24]	; (8000be0 <SPITxRx_writeIO+0x2f4>)
 8000bc8:	4806      	ldr	r0, [pc, #24]	; (8000be4 <SPITxRx_writeIO+0x2f8>)
 8000bca:	f001 fa31 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f000 f9fe 	bl	8000fd0 <HAL_Delay>
}
 8000bd4:	e03a      	b.n	8000c4c <SPITxRx_writeIO+0x360>
 8000bd6:	bf00      	nop
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	200000c4 	.word	0x200000c4
 8000be0:	200000d0 	.word	0x200000d0
 8000be4:	20000028 	.word	0x20000028
		else if(SPIRx[2] == 0b00000111)
 8000be8:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <SPITxRx_writeIO+0x364>)
 8000bea:	789b      	ldrb	r3, [r3, #2]
 8000bec:	2b07      	cmp	r3, #7
 8000bee:	d12d      	bne.n	8000c4c <SPITxRx_writeIO+0x360>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2104      	movs	r1, #4
 8000bf4:	4817      	ldr	r0, [pc, #92]	; (8000c54 <SPITxRx_writeIO+0x368>)
 8000bf6:	f000 fcdf 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000c02:	2213      	movs	r2, #19
 8000c04:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b00001111;
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000c08:	220f      	movs	r2, #15
 8000c0a:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <SPITxRx_writeIO+0x364>)
 8000c10:	4911      	ldr	r1, [pc, #68]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000c12:	4812      	ldr	r0, [pc, #72]	; (8000c5c <SPITxRx_writeIO+0x370>)
 8000c14:	f001 fa0c 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000c18:	2064      	movs	r0, #100	; 0x64
 8000c1a:	f000 f9d9 	bl	8000fd0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2104      	movs	r1, #4
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <SPITxRx_writeIO+0x368>)
 8000c24:	f000 fcc8 	bl	80015b8 <HAL_GPIO_WritePin>
		SPITx[0] = 0b01000000;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000c2a:	2240      	movs	r2, #64	; 0x40
 8000c2c:	701a      	strb	r2, [r3, #0]
		SPITx[1] = 0x13;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000c30:	2213      	movs	r2, #19
 8000c32:	705a      	strb	r2, [r3, #1]
		SPITx[2] = 0b11110000;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000c36:	22f0      	movs	r2, #240	; 0xf0
 8000c38:	709a      	strb	r2, [r3, #2]
		HAL_SPI_TransmitReceive_IT(&hspi3, SPITx, SPIRx, 3);
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <SPITxRx_writeIO+0x364>)
 8000c3e:	4906      	ldr	r1, [pc, #24]	; (8000c58 <SPITxRx_writeIO+0x36c>)
 8000c40:	4806      	ldr	r0, [pc, #24]	; (8000c5c <SPITxRx_writeIO+0x370>)
 8000c42:	f001 f9f5 	bl	8002030 <HAL_SPI_TransmitReceive_IT>
		HAL_Delay(100);
 8000c46:	2064      	movs	r0, #100	; 0x64
 8000c48:	f000 f9c2 	bl	8000fd0 <HAL_Delay>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	200000c4 	.word	0x200000c4
 8000c54:	40020c00 	.word	0x40020c00
 8000c58:	200000d0 	.word	0x200000d0
 8000c5c:	20000028 	.word	0x20000028

08000c60 <HAL_SPI_TxRxCpltCallback>:


void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //CS dnSelect
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2104      	movs	r1, #4
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <HAL_SPI_TxRxCpltCallback+0x1c>)
 8000c6e:	f000 fca3 	bl	80015b8 <HAL_GPIO_WritePin>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40020c00 	.word	0x40020c00

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cca:	2007      	movs	r0, #7
 8000ccc:	f000 fa74 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	; (8000d70 <HAL_SPI_MspInit+0x94>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d134      	bne.n	8000d68 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <HAL_SPI_MspInit+0x98>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <HAL_SPI_MspInit+0x98>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <HAL_SPI_MspInit+0x98>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_SPI_MspInit+0x98>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_SPI_MspInit+0x98>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_SPI_MspInit+0x98>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4809      	ldr	r0, [pc, #36]	; (8000d78 <HAL_SPI_MspInit+0x9c>)
 8000d54:	f000 fa94 	bl	8001280 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2033      	movs	r0, #51	; 0x33
 8000d5e:	f000 fa36 	bl	80011ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000d62:	2033      	movs	r0, #51	; 0x33
 8000d64:	f000 fa4f 	bl	8001206 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3728      	adds	r7, #40	; 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40003c00 	.word	0x40003c00
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020800 	.word	0x40020800

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <HAL_UART_MspInit+0x84>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12b      	bne.n	8000df6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_UART_MspInit+0x88>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a17      	ldr	r2, [pc, #92]	; (8000e04 <HAL_UART_MspInit+0x88>)
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_UART_MspInit+0x88>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_UART_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <HAL_UART_MspInit+0x88>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_UART_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000de6:	2307      	movs	r3, #7
 8000de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_UART_MspInit+0x8c>)
 8000df2:	f000 fa45 	bl	8001280 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40004400 	.word	0x40004400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e58:	f000 f89a 	bl	8000f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <SPI3_IRQHandler+0x10>)
 8000e66:	f001 f977 	bl	8002158 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000028 	.word	0x20000028

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e9e:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ffd7 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f001 ff31 	bl	8002d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fb07 	bl	80004dc <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000edc:	08002dc4 	.word	0x08002dc4
  ldr r2, =_sbss
 8000ee0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ee4:	200000e4 	.word	0x200000e4

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f94f 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f000 f808 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff feb4 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x54>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x58>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f967 	bl	8001222 <HAL_SYSTICK_Config>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00e      	b.n	8000f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2b0f      	cmp	r3, #15
 8000f62:	d80a      	bhi.n	8000f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f64:	2200      	movs	r2, #0
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f000 f92f 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f70:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_InitTick+0x5c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e000      	b.n	8000f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000000 	.word	0x20000000
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	20000004 	.word	0x20000004

08000f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x20>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x24>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <HAL_IncTick+0x24>)
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000008 	.word	0x20000008
 8000fb4:	200000e0 	.word	0x200000e0

08000fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return uwTick;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <HAL_GetTick+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	200000e0 	.word	0x200000e0

08000fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff ffee 	bl	8000fb8 <HAL_GetTick>
 8000fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe8:	d005      	beq.n	8000ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_Delay+0x44>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ff6:	bf00      	nop
 8000ff8:	f7ff ffde 	bl	8000fb8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d8f7      	bhi.n	8000ff8 <HAL_Delay+0x28>
  {
  }
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008

08001018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800102e:	68ba      	ldr	r2, [r7, #8]
 8001030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001040:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104a:	4a04      	ldr	r2, [pc, #16]	; (800105c <__NVIC_SetPriorityGrouping+0x44>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	60d3      	str	r3, [r2, #12]
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_GetPriorityGrouping+0x18>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0307 	and.w	r3, r3, #7
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	2b00      	cmp	r3, #0
 800108c:	db0b      	blt.n	80010a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f003 021f 	and.w	r2, r3, #31
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <__NVIC_EnableIRQ+0x38>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	095b      	lsrs	r3, r3, #5
 800109c:	2001      	movs	r0, #1
 800109e:	fa00 f202 	lsl.w	r2, r0, r2
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff8e 	bl	80010b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff29 	bl	8001018 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff3e 	bl	8001060 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff8e 	bl	800110c <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5d 	bl	80010b8 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff31 	bl	800107c <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d004      	beq.n	8001258 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e00c      	b.n	8001272 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2205      	movs	r2, #5
 800125c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	; 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
 800129a:	e159      	b.n	8001550 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800129c:	2201      	movs	r2, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8148 	bne.w	800154a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d005      	beq.n	80012d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d130      	bne.n	8001334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	2203      	movs	r2, #3
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001308:	2201      	movs	r2, #1
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	091b      	lsrs	r3, r3, #4
 800131e:	f003 0201 	and.w	r2, r3, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b03      	cmp	r3, #3
 800133e:	d017      	beq.n	8001370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d123      	bne.n	80013c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	08da      	lsrs	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3208      	adds	r2, #8
 8001384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	69b9      	ldr	r1, [r7, #24]
 80013c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0203 	and.w	r2, r3, #3
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 80a2 	beq.w	800154a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b57      	ldr	r3, [pc, #348]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a56      	ldr	r2, [pc, #344]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b54      	ldr	r3, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001422:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_GPIO_Init+0x2ec>)
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	089b      	lsrs	r3, r3, #2
 8001428:	3302      	adds	r3, #2
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	220f      	movs	r2, #15
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x202>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a48      	ldr	r2, [pc, #288]	; (8001574 <HAL_GPIO_Init+0x2f4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x1fe>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a47      	ldr	r2, [pc, #284]	; (8001578 <HAL_GPIO_Init+0x2f8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x1fa>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a46      	ldr	r2, [pc, #280]	; (800157c <HAL_GPIO_Init+0x2fc>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x1f6>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a45      	ldr	r2, [pc, #276]	; (8001580 <HAL_GPIO_Init+0x300>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x1f2>
 800146e:	2304      	movs	r3, #4
 8001470:	e008      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001472:	2307      	movs	r3, #7
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001476:	2303      	movs	r3, #3
 8001478:	e004      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147a:	2302      	movs	r3, #2
 800147c:	e002      	b.n	8001484 <HAL_GPIO_Init+0x204>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <HAL_GPIO_Init+0x204>
 8001482:	2300      	movs	r3, #0
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	f002 0203 	and.w	r2, r2, #3
 800148a:	0092      	lsls	r2, r2, #2
 800148c:	4093      	lsls	r3, r2
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4313      	orrs	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001494:	4935      	ldr	r1, [pc, #212]	; (800156c <HAL_GPIO_Init+0x2ec>)
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014c6:	4a2f      	ldr	r2, [pc, #188]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014f6:	4b23      	ldr	r3, [pc, #140]	; (8001584 <HAL_GPIO_Init+0x304>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800151a:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HAL_GPIO_Init+0x304>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_GPIO_Init+0x304>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HAL_GPIO_Init+0x304>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3301      	adds	r3, #1
 800154e:	61fb      	str	r3, [r7, #28]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	2b0f      	cmp	r3, #15
 8001554:	f67f aea2 	bls.w	800129c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40013800 	.word	0x40013800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40020800 	.word	0x40020800
 800157c:	40020c00 	.word	0x40020c00
 8001580:	40021000 	.word	0x40021000
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	4013      	ands	r3, r2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d002      	beq.n	80015a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015a0:	2301      	movs	r3, #1
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e001      	b.n	80015aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
 80015c4:	4613      	mov	r3, r2
 80015c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c8:	787b      	ldrb	r3, [r7, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d4:	e003      	b.n	80015de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	619a      	str	r2, [r3, #24]
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
	...

080015ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e267      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d075      	beq.n	80016f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160a:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00c      	beq.n	8001630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b85      	ldr	r3, [pc, #532]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800161e:	2b08      	cmp	r3, #8
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b82      	ldr	r3, [pc, #520]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4b7e      	ldr	r3, [pc, #504]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x108>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d157      	bne.n	80016f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e242      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x74>
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a75      	ldr	r2, [pc, #468]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x98>
 800166a:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6f      	ldr	r2, [pc, #444]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b6d      	ldr	r3, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6c      	ldr	r2, [pc, #432]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001684:	4b69      	ldr	r3, [pc, #420]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a68      	ldr	r2, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc88 	bl	8000fb8 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc84 	bl	8000fb8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e207      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b5b      	ldr	r3, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xc0>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc74 	bl	8000fb8 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fc70 	bl	8000fb8 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1f3      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b51      	ldr	r3, [pc, #324]	; (800182c <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0xe8>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001702:	4b4a      	ldr	r3, [pc, #296]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1c7      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b3b      	ldr	r3, [pc, #236]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4937      	ldr	r1, [pc, #220]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_RCC_OscConfig+0x244>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fc29 	bl	8000fb8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fc25 	bl	8000fb8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1a8      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4925      	ldr	r1, [pc, #148]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_OscConfig+0x244>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fc08 	bl	8000fb8 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fc04 	bl	8000fb8 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e187      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d036      	beq.n	8001844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_RCC_OscConfig+0x248>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fbe8 	bl	8000fb8 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fbe4 	bl	8000fb8 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e167      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x240>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x200>
 800180a:	e01b      	b.n	8001844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_OscConfig+0x248>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fbd1 	bl	8000fb8 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	e00e      	b.n	8001838 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff fbcd 	bl	8000fb8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d907      	bls.n	8001838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e150      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 800182c:	40023800 	.word	0x40023800
 8001830:	42470000 	.word	0x42470000
 8001834:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b88      	ldr	r3, [pc, #544]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 800183a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ea      	bne.n	800181a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8097 	beq.w	8001980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b81      	ldr	r3, [pc, #516]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b7d      	ldr	r3, [pc, #500]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a7c      	ldr	r2, [pc, #496]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
 8001872:	4b7a      	ldr	r3, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b77      	ldr	r3, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b74      	ldr	r3, [pc, #464]	; (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a73      	ldr	r2, [pc, #460]	; (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7ff fb8d 	bl	8000fb8 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff fb89 	bl	8000fb8 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e10c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b6a      	ldr	r3, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x474>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2ea>
 80018c8:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a63      	ldr	r2, [pc, #396]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x30c>
 80018de:	4b5f      	ldr	r3, [pc, #380]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a5e      	ldr	r2, [pc, #376]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	4b5c      	ldr	r3, [pc, #368]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a5b      	ldr	r2, [pc, #364]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018f8:	4b58      	ldr	r3, [pc, #352]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fc:	4a57      	ldr	r2, [pc, #348]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	; 0x70
 8001904:	4b55      	ldr	r3, [pc, #340]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001908:	4a54      	ldr	r2, [pc, #336]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fb4e 	bl	8000fb8 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fb4a 	bl	8000fb8 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0cb      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ee      	beq.n	8001920 <HAL_RCC_OscConfig+0x334>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fb38 	bl	8000fb8 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fb34 	bl	8000fb8 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	; 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0b5      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001974:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	4a38      	ldr	r2, [pc, #224]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a1 	beq.w	8001acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b08      	cmp	r3, #8
 8001994:	d05c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d141      	bne.n	8001a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fb08 	bl	8000fb8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff fb04 	bl	8000fb8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e087      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fadd 	bl	8000fb8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fad9 	bl	8000fb8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e05c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x416>
 8001a20:	e054      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x478>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fac6 	bl	8000fb8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff fac2 	bl	8000fb8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e045      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x444>
 8001a4e:	e03d      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e038      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_RCC_OscConfig+0x4ec>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d028      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d121      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11a      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0cc      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d90c      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b63      	ldr	r3, [pc, #396]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0b8      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b30:	4b59      	ldr	r3, [pc, #356]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b48:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a52      	ldr	r2, [pc, #328]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	494d      	ldr	r1, [pc, #308]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d044      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d119      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e07f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e067      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b37      	ldr	r3, [pc, #220]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4934      	ldr	r1, [pc, #208]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f9f4 	bl	8000fb8 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff f9f0 	bl	8000fb8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d20c      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e032      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4916      	ldr	r1, [pc, #88]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	490e      	ldr	r1, [pc, #56]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c62:	f000 f821 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	490a      	ldr	r1, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f954 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08002d9c 	.word	0x08002d9c
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cac:	b094      	sub	sp, #80	; 0x50
 8001cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cb8:	2300      	movs	r3, #0
 8001cba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc0:	4b79      	ldr	r3, [pc, #484]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d00d      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	f200 80e1 	bhi.w	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x34>
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cda:	e0db      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b73      	ldr	r3, [pc, #460]	; (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ce0:	e0db      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce2:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ce6:	e0d8      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cf0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	2200      	movs	r2, #0
 8001d06:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d10:	633b      	str	r3, [r7, #48]	; 0x30
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
 8001d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	6139      	str	r1, [r7, #16]
 8001d38:	4629      	mov	r1, r5
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	018b      	lsls	r3, r1, #6
 8001d50:	4651      	mov	r1, sl
 8001d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d56:	4651      	mov	r1, sl
 8001d58:	018a      	lsls	r2, r1, #6
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d60:	4659      	mov	r1, fp
 8001d62:	eb63 0901 	sbc.w	r9, r3, r1
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	eb18 0303 	adds.w	r3, r8, r3
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	462b      	mov	r3, r5
 8001d88:	eb49 0303 	adc.w	r3, r9, r3
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	024b      	lsls	r3, r1, #9
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da4:	4621      	mov	r1, r4
 8001da6:	024a      	lsls	r2, r1, #9
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001db8:	f7fe fa0e 	bl	80001d8 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dc4:	e058      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
 8001ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	0159      	lsls	r1, r3, #5
 8001dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df2:	0150      	lsls	r0, r2, #5
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4641      	mov	r1, r8
 8001dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dfe:	4649      	mov	r1, r9
 8001e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e18:	ebb2 040a 	subs.w	r4, r2, sl
 8001e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	00eb      	lsls	r3, r5, #3
 8001e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2e:	00e2      	lsls	r2, r4, #3
 8001e30:	4614      	mov	r4, r2
 8001e32:	461d      	mov	r5, r3
 8001e34:	4643      	mov	r3, r8
 8001e36:	18e3      	adds	r3, r4, r3
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	eb45 0303 	adc.w	r3, r5, r3
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4e:	4629      	mov	r1, r5
 8001e50:	028b      	lsls	r3, r1, #10
 8001e52:	4621      	mov	r1, r4
 8001e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e58:	4621      	mov	r1, r4
 8001e5a:	028a      	lsls	r2, r1, #10
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e62:	2200      	movs	r2, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	61fa      	str	r2, [r7, #28]
 8001e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6c:	f7fe f9b4 	bl	80001d8 <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	3301      	adds	r3, #1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001e96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3750      	adds	r7, #80	; 0x50
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200

08001eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a9b      	lsrs	r3, r3, #10
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08002dac 	.word	0x08002dac

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ef8:	f7ff ffdc 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0b5b      	lsrs	r3, r3, #13
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08002dac 	.word	0x08002dac

08001f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07b      	b.n	8002026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f3e:	d009      	beq.n	8001f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
 8001f46:	e005      	b.n	8001f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe feb4 	bl	8000cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd8:	ea42 0103 	orr.w	r1, r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	f003 0104 	and.w	r1, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	f003 0210 	and.w	r2, r3, #16
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_SPI_TransmitReceive_IT+0x20>
 800204c:	2302      	movs	r3, #2
 800204e:	e075      	b.n	800213c <HAL_SPI_TransmitReceive_IT+0x10c>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800205e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002066:	7dbb      	ldrb	r3, [r7, #22]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d00d      	beq.n	8002088 <HAL_SPI_TransmitReceive_IT+0x58>
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002072:	d106      	bne.n	8002082 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <HAL_SPI_TransmitReceive_IT+0x52>
 800207c:	7dbb      	ldrb	r3, [r7, #22]
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002082:	2302      	movs	r3, #2
 8002084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002086:	e054      	b.n	8002132 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <HAL_SPI_TransmitReceive_IT+0x6a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <HAL_SPI_TransmitReceive_IT+0x6a>
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800209e:	e048      	b.n	8002132 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d003      	beq.n	80020b4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2205      	movs	r2, #5
 80020b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	887a      	ldrh	r2, [r7, #2]
 80020d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_SPI_TransmitReceive_IT+0x118>)
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a17      	ldr	r2, [pc, #92]	; (800214c <HAL_SPI_TransmitReceive_IT+0x11c>)
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
 80020f2:	e005      	b.n	8002100 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4a16      	ldr	r2, [pc, #88]	; (8002150 <HAL_SPI_TransmitReceive_IT+0x120>)
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_SPI_TransmitReceive_IT+0x124>)
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800210e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d008      	beq.n	8002130 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e000      	b.n	8002132 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8002130:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800213a:	7dfb      	ldrb	r3, [r7, #23]
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	0800246d 	.word	0x0800246d
 800214c:	080024cd 	.word	0x080024cd
 8002150:	080023a9 	.word	0x080023a9
 8002154:	0800240d 	.word	0x0800240d

08002158 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10f      	bne.n	800219c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d004      	beq.n	800219c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
    return;
 800219a:	e0d7      	b.n	800234c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_SPI_IRQHandler+0x66>
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	09db      	lsrs	r3, r3, #7
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4798      	blx	r3
    return;
 80021bc:	e0c6      	b.n	800234c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_SPI_IRQHandler+0x8c>
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80b4 	beq.w	800234c <HAL_SPI_IRQHandler+0x1f4>
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ad 	beq.w	800234c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d023      	beq.n	8002246 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b03      	cmp	r3, #3
 8002208:	d011      	beq.n	800222e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	e00b      	b.n	8002246 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
        return;
 8002244:	e082      	b.n	800234c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d014      	beq.n	800227c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228c:	f043 0208 	orr.w	r2, r3, #8
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d04f      	beq.n	800234a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80022b8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <HAL_SPI_IRQHandler+0x17e>
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d034      	beq.n	8002340 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0203 	bic.w	r2, r2, #3
 80022e4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d011      	beq.n	8002312 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_SPI_IRQHandler+0x1fc>)
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe ff9d 	bl	800123a <HAL_DMA_Abort_IT>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002316:	2b00      	cmp	r3, #0
 8002318:	d016      	beq.n	8002348 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_SPI_IRQHandler+0x1fc>)
 8002320:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe ff87 	bl	800123a <HAL_DMA_Abort_IT>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800233e:	e003      	b.n	8002348 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f813 	bl	800236c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002346:	e000      	b.n	800234a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002348:	bf00      	nop
    return;
 800234a:	bf00      	nop
  }
}
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	08002381 	.word	0x08002381

08002358 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff ffe6 	bl	800236c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f103 020c 	add.w	r2, r3, #12
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10f      	bne.n	8002404 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023f2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d102      	bne.n	8002404 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f95e 	bl	80026c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	7812      	ldrb	r2, [r2, #0]
 8002420:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10f      	bne.n	8002464 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002452:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d102      	bne.n	8002464 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f92e 	bl	80026c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	b292      	uxth	r2, r2
 8002480:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	1c9a      	adds	r2, r3, #2
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10f      	bne.n	80024c4 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024b2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8fe 	bl	80026c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	1c9a      	adds	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10f      	bne.n	8002522 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002510:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002516:	b29b      	uxth	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8cf 	bl	80026c0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
	...

0800252c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800253c:	f7fe fd3c 	bl	8000fb8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	4413      	add	r3, r2
 800254a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800254c:	f7fe fd34 	bl	8000fb8 <HAL_GetTick>
 8002550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002552:	4b39      	ldr	r3, [pc, #228]	; (8002638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	015b      	lsls	r3, r3, #5
 8002558:	0d1b      	lsrs	r3, r3, #20
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002562:	e054      	b.n	800260e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256a:	d050      	beq.n	800260e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800256c:	f7fe fd24 	bl	8000fb8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	429a      	cmp	r2, r3
 800257a:	d902      	bls.n	8002582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d13d      	bne.n	80025fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800259a:	d111      	bne.n	80025c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a4:	d004      	beq.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d107      	bne.n	80025c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c8:	d10f      	bne.n	80025ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e017      	b.n	800262e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3b01      	subs	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4013      	ands	r3, r2
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	429a      	cmp	r2, r3
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	429a      	cmp	r2, r3
 800262a:	d19b      	bne.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3720      	adds	r7, #32
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000000 	.word	0x20000000

0800263c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <SPI_EndRxTxTransaction+0x7c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <SPI_EndRxTxTransaction+0x80>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0d5b      	lsrs	r3, r3, #21
 8002654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002666:	d112      	bne.n	800268e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff ff5a 	bl	800252c <SPI_WaitFlagStateUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0220 	orr.w	r2, r3, #32
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e00f      	b.n	80026ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3b01      	subs	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d0f2      	beq.n	800268e <SPI_EndRxTxTransaction+0x52>
 80026a8:	e000      	b.n	80026ac <SPI_EndRxTxTransaction+0x70>
        break;
 80026aa:	bf00      	nop
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000
 80026bc:	165e9f81 	.word	0x165e9f81

080026c0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <SPI_CloseRxTx_ISR+0xe0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a35      	ldr	r2, [pc, #212]	; (80027a4 <SPI_CloseRxTx_ISR+0xe4>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0a5b      	lsrs	r3, r3, #9
 80026d4:	2264      	movs	r2, #100	; 0x64
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80026dc:	f7fe fc6c 	bl	8000fb8 <HAL_GetTick>
 80026e0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0220 	bic.w	r2, r2, #32
 80026f0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d106      	bne.n	8002706 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002704:	e009      	b.n	800271a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	3b01      	subs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0eb      	beq.n	80026f2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	2164      	movs	r1, #100	; 0x64
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ff8c 	bl	800263c <SPI_EndRxTxTransaction>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10a      	bne.n	8002754 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002758:	2b00      	cmp	r3, #0
 800275a:	d115      	bne.n	8002788 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b04      	cmp	r3, #4
 8002766:	d107      	bne.n	8002778 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fdf1 	bl	8002358 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002776:	e00e      	b.n	8002796 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fe fa6d 	bl	8000c60 <HAL_SPI_TxRxCpltCallback>
}
 8002786:	e006      	b.n	8002796 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff fdeb 	bl	800236c <HAL_SPI_ErrorCallback>
}
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000
 80027a4:	057619f1 	.word	0x057619f1

080027a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e03f      	b.n	800283a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe fad4 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	; 0x24
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f829 	bl	8002844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002844:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002848:	b0c0      	sub	sp, #256	; 0x100
 800284a:	af00      	add	r7, sp, #0
 800284c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002860:	68d9      	ldr	r1, [r3, #12]
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	ea40 0301 	orr.w	r3, r0, r1
 800286c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	431a      	orrs	r2, r3
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	431a      	orrs	r2, r3
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800289c:	f021 010c 	bic.w	r1, r1, #12
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028aa:	430b      	orrs	r3, r1
 80028ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028be:	6999      	ldr	r1, [r3, #24]
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	ea40 0301 	orr.w	r3, r0, r1
 80028ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b8f      	ldr	r3, [pc, #572]	; (8002b10 <UART_SetConfig+0x2cc>)
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d005      	beq.n	80028e4 <UART_SetConfig+0xa0>
 80028d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b8d      	ldr	r3, [pc, #564]	; (8002b14 <UART_SetConfig+0x2d0>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d104      	bne.n	80028ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028e4:	f7ff fb06 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 80028e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028ec:	e003      	b.n	80028f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028ee:	f7ff faed 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80028f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002900:	f040 810c 	bne.w	8002b1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002908:	2200      	movs	r2, #0
 800290a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800290e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002912:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	1891      	adds	r1, r2, r2
 800291c:	65b9      	str	r1, [r7, #88]	; 0x58
 800291e:	415b      	adcs	r3, r3
 8002920:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002922:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002926:	4621      	mov	r1, r4
 8002928:	eb12 0801 	adds.w	r8, r2, r1
 800292c:	4629      	mov	r1, r5
 800292e:	eb43 0901 	adc.w	r9, r3, r1
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002942:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002946:	4690      	mov	r8, r2
 8002948:	4699      	mov	r9, r3
 800294a:	4623      	mov	r3, r4
 800294c:	eb18 0303 	adds.w	r3, r8, r3
 8002950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002954:	462b      	mov	r3, r5
 8002956:	eb49 0303 	adc.w	r3, r9, r3
 800295a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800296a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800296e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002972:	460b      	mov	r3, r1
 8002974:	18db      	adds	r3, r3, r3
 8002976:	653b      	str	r3, [r7, #80]	; 0x50
 8002978:	4613      	mov	r3, r2
 800297a:	eb42 0303 	adc.w	r3, r2, r3
 800297e:	657b      	str	r3, [r7, #84]	; 0x54
 8002980:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002984:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002988:	f7fd fc26 	bl	80001d8 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4b61      	ldr	r3, [pc, #388]	; (8002b18 <UART_SetConfig+0x2d4>)
 8002992:	fba3 2302 	umull	r2, r3, r3, r2
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	011c      	lsls	r4, r3, #4
 800299a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029ac:	4642      	mov	r2, r8
 80029ae:	464b      	mov	r3, r9
 80029b0:	1891      	adds	r1, r2, r2
 80029b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80029b4:	415b      	adcs	r3, r3
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029bc:	4641      	mov	r1, r8
 80029be:	eb12 0a01 	adds.w	sl, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb43 0b01 	adc.w	fp, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029dc:	4692      	mov	sl, r2
 80029de:	469b      	mov	fp, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	eb1a 0303 	adds.w	r3, sl, r3
 80029e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029ea:	464b      	mov	r3, r9
 80029ec:	eb4b 0303 	adc.w	r3, fp, r3
 80029f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	18db      	adds	r3, r3, r3
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a0e:	4613      	mov	r3, r2
 8002a10:	eb42 0303 	adc.w	r3, r2, r3
 8002a14:	647b      	str	r3, [r7, #68]	; 0x44
 8002a16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a1e:	f7fd fbdb 	bl	80001d8 <__aeabi_uldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	4b3b      	ldr	r3, [pc, #236]	; (8002b18 <UART_SetConfig+0x2d4>)
 8002a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2264      	movs	r2, #100	; 0x64
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	1acb      	subs	r3, r1, r3
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <UART_SetConfig+0x2d4>)
 8002a40:	fba3 2302 	umull	r2, r3, r3, r2
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a4c:	441c      	add	r4, r3
 8002a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a52:	2200      	movs	r2, #0
 8002a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a60:	4642      	mov	r2, r8
 8002a62:	464b      	mov	r3, r9
 8002a64:	1891      	adds	r1, r2, r2
 8002a66:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a68:	415b      	adcs	r3, r3
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a70:	4641      	mov	r1, r8
 8002a72:	1851      	adds	r1, r2, r1
 8002a74:	6339      	str	r1, [r7, #48]	; 0x30
 8002a76:	4649      	mov	r1, r9
 8002a78:	414b      	adcs	r3, r1
 8002a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a88:	4659      	mov	r1, fp
 8002a8a:	00cb      	lsls	r3, r1, #3
 8002a8c:	4651      	mov	r1, sl
 8002a8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a92:	4651      	mov	r1, sl
 8002a94:	00ca      	lsls	r2, r1, #3
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4642      	mov	r2, r8
 8002a9e:	189b      	adds	r3, r3, r2
 8002aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002aa4:	464b      	mov	r3, r9
 8002aa6:	460a      	mov	r2, r1
 8002aa8:	eb42 0303 	adc.w	r3, r2, r3
 8002aac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002abc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	18db      	adds	r3, r3, r3
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aca:	4613      	mov	r3, r2
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ad2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ad6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ada:	f7fd fb7d 	bl	80001d8 <__aeabi_uldivmod>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <UART_SetConfig+0x2d4>)
 8002ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	2164      	movs	r1, #100	; 0x64
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3332      	adds	r3, #50	; 0x32
 8002af6:	4a08      	ldr	r2, [pc, #32]	; (8002b18 <UART_SetConfig+0x2d4>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	f003 0207 	and.w	r2, r3, #7
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4422      	add	r2, r4
 8002b0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b0c:	e105      	b.n	8002d1a <UART_SetConfig+0x4d6>
 8002b0e:	bf00      	nop
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40011400 	.word	0x40011400
 8002b18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b20:	2200      	movs	r2, #0
 8002b22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b2e:	4642      	mov	r2, r8
 8002b30:	464b      	mov	r3, r9
 8002b32:	1891      	adds	r1, r2, r2
 8002b34:	6239      	str	r1, [r7, #32]
 8002b36:	415b      	adcs	r3, r3
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b3e:	4641      	mov	r1, r8
 8002b40:	1854      	adds	r4, r2, r1
 8002b42:	4649      	mov	r1, r9
 8002b44:	eb43 0501 	adc.w	r5, r3, r1
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	00eb      	lsls	r3, r5, #3
 8002b52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b56:	00e2      	lsls	r2, r4, #3
 8002b58:	4614      	mov	r4, r2
 8002b5a:	461d      	mov	r5, r3
 8002b5c:	4643      	mov	r3, r8
 8002b5e:	18e3      	adds	r3, r4, r3
 8002b60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b64:	464b      	mov	r3, r9
 8002b66:	eb45 0303 	adc.w	r3, r5, r3
 8002b6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	008b      	lsls	r3, r1, #2
 8002b8e:	4621      	mov	r1, r4
 8002b90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b94:	4621      	mov	r1, r4
 8002b96:	008a      	lsls	r2, r1, #2
 8002b98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b9c:	f7fd fb1c 	bl	80001d8 <__aeabi_uldivmod>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <UART_SetConfig+0x4e4>)
 8002ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	011c      	lsls	r4, r3, #4
 8002bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bc0:	4642      	mov	r2, r8
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	1891      	adds	r1, r2, r2
 8002bc6:	61b9      	str	r1, [r7, #24]
 8002bc8:	415b      	adcs	r3, r3
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd0:	4641      	mov	r1, r8
 8002bd2:	1851      	adds	r1, r2, r1
 8002bd4:	6139      	str	r1, [r7, #16]
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	414b      	adcs	r3, r1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	f04f 0200 	mov.w	r2, #0
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002be8:	4659      	mov	r1, fp
 8002bea:	00cb      	lsls	r3, r1, #3
 8002bec:	4651      	mov	r1, sl
 8002bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bf2:	4651      	mov	r1, sl
 8002bf4:	00ca      	lsls	r2, r1, #3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	189b      	adds	r3, r3, r2
 8002c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c04:	464b      	mov	r3, r9
 8002c06:	460a      	mov	r2, r1
 8002c08:	eb42 0303 	adc.w	r3, r2, r3
 8002c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c28:	4649      	mov	r1, r9
 8002c2a:	008b      	lsls	r3, r1, #2
 8002c2c:	4641      	mov	r1, r8
 8002c2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c32:	4641      	mov	r1, r8
 8002c34:	008a      	lsls	r2, r1, #2
 8002c36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c3a:	f7fd facd 	bl	80001d8 <__aeabi_uldivmod>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <UART_SetConfig+0x4e4>)
 8002c44:	fba3 1302 	umull	r1, r3, r3, r2
 8002c48:	095b      	lsrs	r3, r3, #5
 8002c4a:	2164      	movs	r1, #100	; 0x64
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	3332      	adds	r3, #50	; 0x32
 8002c56:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <UART_SetConfig+0x4e4>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	095b      	lsrs	r3, r3, #5
 8002c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c62:	441c      	add	r4, r3
 8002c64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c68:	2200      	movs	r2, #0
 8002c6a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c6c:	677a      	str	r2, [r7, #116]	; 0x74
 8002c6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c72:	4642      	mov	r2, r8
 8002c74:	464b      	mov	r3, r9
 8002c76:	1891      	adds	r1, r2, r2
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	415b      	adcs	r3, r3
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c82:	4641      	mov	r1, r8
 8002c84:	1851      	adds	r1, r2, r1
 8002c86:	6039      	str	r1, [r7, #0]
 8002c88:	4649      	mov	r1, r9
 8002c8a:	414b      	adcs	r3, r1
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c9a:	4659      	mov	r1, fp
 8002c9c:	00cb      	lsls	r3, r1, #3
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca4:	4651      	mov	r1, sl
 8002ca6:	00ca      	lsls	r2, r1, #3
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	4642      	mov	r2, r8
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	460a      	mov	r2, r1
 8002cb8:	eb42 0303 	adc.w	r3, r2, r3
 8002cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cc8:	667a      	str	r2, [r7, #100]	; 0x64
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cd6:	4649      	mov	r1, r9
 8002cd8:	008b      	lsls	r3, r1, #2
 8002cda:	4641      	mov	r1, r8
 8002cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	008a      	lsls	r2, r1, #2
 8002ce4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ce8:	f7fd fa76 	bl	80001d8 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <UART_SetConfig+0x4e4>)
 8002cf2:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2164      	movs	r1, #100	; 0x64
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	3332      	adds	r3, #50	; 0x32
 8002d04:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <UART_SetConfig+0x4e4>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	f003 020f 	and.w	r2, r3, #15
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4422      	add	r2, r4
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d20:	46bd      	mov	sp, r7
 8002d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d26:	bf00      	nop
 8002d28:	51eb851f 	.word	0x51eb851f

08002d2c <__libc_init_array>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	4d0d      	ldr	r5, [pc, #52]	; (8002d64 <__libc_init_array+0x38>)
 8002d30:	4c0d      	ldr	r4, [pc, #52]	; (8002d68 <__libc_init_array+0x3c>)
 8002d32:	1b64      	subs	r4, r4, r5
 8002d34:	10a4      	asrs	r4, r4, #2
 8002d36:	2600      	movs	r6, #0
 8002d38:	42a6      	cmp	r6, r4
 8002d3a:	d109      	bne.n	8002d50 <__libc_init_array+0x24>
 8002d3c:	4d0b      	ldr	r5, [pc, #44]	; (8002d6c <__libc_init_array+0x40>)
 8002d3e:	4c0c      	ldr	r4, [pc, #48]	; (8002d70 <__libc_init_array+0x44>)
 8002d40:	f000 f820 	bl	8002d84 <_init>
 8002d44:	1b64      	subs	r4, r4, r5
 8002d46:	10a4      	asrs	r4, r4, #2
 8002d48:	2600      	movs	r6, #0
 8002d4a:	42a6      	cmp	r6, r4
 8002d4c:	d105      	bne.n	8002d5a <__libc_init_array+0x2e>
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
 8002d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d54:	4798      	blx	r3
 8002d56:	3601      	adds	r6, #1
 8002d58:	e7ee      	b.n	8002d38 <__libc_init_array+0xc>
 8002d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5e:	4798      	blx	r3
 8002d60:	3601      	adds	r6, #1
 8002d62:	e7f2      	b.n	8002d4a <__libc_init_array+0x1e>
 8002d64:	08002dbc 	.word	0x08002dbc
 8002d68:	08002dbc 	.word	0x08002dbc
 8002d6c:	08002dbc 	.word	0x08002dbc
 8002d70:	08002dc0 	.word	0x08002dc0

08002d74 <memset>:
 8002d74:	4402      	add	r2, r0
 8002d76:	4603      	mov	r3, r0
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <_init>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	bf00      	nop
 8002d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d8a:	bc08      	pop	{r3}
 8002d8c:	469e      	mov	lr, r3
 8002d8e:	4770      	bx	lr

08002d90 <_fini>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	bf00      	nop
 8002d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d96:	bc08      	pop	{r3}
 8002d98:	469e      	mov	lr, r3
 8002d9a:	4770      	bx	lr
